// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Bubotka/Microservices/geo/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// GeoRepository is an autogenerated mock type for the GeoRepository type
type GeoRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, sha
func (_m *GeoRepository) Create(ctx context.Context, sha models.SearchHistoryAddress) error {
	ret := _m.Called(ctx, sha)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SearchHistoryAddress) error); ok {
		r0 = rf(ctx, sha)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListLevenshtein provides a mock function with given fields: ctx, columnName, targetText
func (_m *GeoRepository) ListLevenshtein(ctx context.Context, columnName string, targetText string) (models.SearchHistoryAddress, error) {
	ret := _m.Called(ctx, columnName, targetText)

	var r0 models.SearchHistoryAddress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.SearchHistoryAddress, error)); ok {
		return rf(ctx, columnName, targetText)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.SearchHistoryAddress); ok {
		r0 = rf(ctx, columnName, targetText)
	} else {
		r0 = ret.Get(0).(models.SearchHistoryAddress)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, columnName, targetText)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGeoRepository creates a new instance of GeoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeoRepository {
	mock := &GeoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
