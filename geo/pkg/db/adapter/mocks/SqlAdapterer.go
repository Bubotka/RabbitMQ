// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	"geo/pkg/db/adapter"

	mock "github.com/stretchr/testify/mock"

	models "main/internal/models"
)

// SqlAdapterer is an autogenerated mock type for the SqlAdapterer type
type SqlAdapterer struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, entity
func (_m *SqlAdapterer) Create(ctx context.Context, entity models.Tabler) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Tabler) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCount provides a mock function with given fields: ctx, entity, condition
func (_m *SqlAdapterer) GetCount(ctx context.Context, entity models.Tabler, condition adapter.Condition) (int, error) {
	ret := _m.Called(ctx, entity, condition)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Tabler, adapter.Condition) (int, error)); ok {
		return rf(ctx, entity, condition)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Tabler, adapter.Condition) int); ok {
		r0 = rf(ctx, entity, condition)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Tabler, adapter.Condition) error); ok {
		r1 = rf(ctx, entity, condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, dest, table, condition
func (_m *SqlAdapterer) List(ctx context.Context, dest interface{}, table models.Tabler, condition adapter.Condition) error {
	ret := _m.Called(ctx, dest, table, condition)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, models.Tabler, adapter.Condition) error); ok {
		r0 = rf(ctx, dest, table, condition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListLevenshtein provides a mock function with given fields: ctx, dest, table, columnName, targetText
func (_m *SqlAdapterer) ListLevenshtein(ctx context.Context, dest interface{}, table models.Tabler, columnName string, targetText string) error {
	ret := _m.Called(ctx, dest, table, columnName, targetText)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, models.Tabler, string, string) error); ok {
		r0 = rf(ctx, dest, table, columnName, targetText)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, entity, condition, opts
func (_m *SqlAdapterer) Update(ctx context.Context, entity models.Tabler, condition adapter.Condition, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, entity, condition)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Tabler, adapter.Condition, ...interface{}) error); ok {
		r0 = rf(ctx, entity, condition, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSqlAdapterer creates a new instance of SqlAdapterer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSqlAdapterer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SqlAdapterer {
	mock := &SqlAdapterer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
